/*
reserved 当控制信息用，比如：
	reserved "k_id", "i_name"; // 控制用，id == main key, name == index
名字格式：
k_xx : 表示xx为主键
i_xx : 表示xx为查找索引
*/

syntax                        = "proto3";
package db_proto; 

import "google/protobuf/descriptor.proto";
enum KeyOptType {
    IndexType_NONE = 0;
    KeyOpt1 = 155;
    KeyOpt2 = 255;
}

extend google.protobuf.FieldOptions {
    KeyOptType KeyOpt = 51234;//51234 ;
    string StrOpt = 51235;
    uint32 IntOpt = 51236;
}

//消息号，请求和响应一样。
enum Cmd
{
	CMD_NONE                  =0;
	CMD_CREATE_TABLE          =1; 
	CMD_INSERT                =2;
	CMD_GET                   =3;
	CMD_UPDATE                =4;
	CMD_DEL                   =5;
}

message ReqSelectTable
{

	string			msg_name  = 1;	//proto message name
	string			cond      = 3;	//条件查询字符串, SQL where 后面的字符串， 例如"id=2". 
	uint32			limit_num = 4;	//限制查询数量 sql 的"limit num".
	
	//选用
	string s1 = 3334 [(KeyOpt)=KeyOpt1];
	string s2 = 333[(StrOpt)="ab"];
	string s3 = 3333[(IntOpt)=33];
	reserved "foo", "bar"; // 预留将来使用的filed name
}

message RspSelectTable
{
	string			msg_name  = 1;	//对应的proto消息体必须有id字段作为key
	bytes			data      = 2;	//proto serialize data
	bool			is_last   = 3;	//true表示最后一条数据		
}

message ReqCreateTable
{
	string			msg_name  = 1;	//对应的proto消息体必须有id字段作为key
}

message ReqInsertData
{
	string			msg_name  = 1;
	bytes			data      = 2;	//proto serialize data 
}
message RspInsertData
{
	string			msg_name  = 1;
}


message ReqUpdateData
{
	string			msg_name  = 1;
	bytes			data      = 2;	//proto serialize data 
}
message RsqUpdateData
{
	string			msg_name  = 1;
}

message ReqDelData
{
	string			msg_name  = 1;
	string			cond      = 2;			
}
message RsqDelData
{
	string			msg_name  = 1;
}


